/*
 * There is color constants (of dynamic colors)
 */

@use "./ColorUtils" as cu;
@use "./ColorVars" as cl;

//
@use "../core/LogicFb" as flg;
@use "../core/LogicSign" as slg;

//
@mixin contrast($name, $from, $alpha: 1) {
    @supports     (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{slg.sign(calc(l - 0.6))} * 0.8 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
    @supports not (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{flg.sign(calc(l - 0.6))} * 0.8 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
}

//
@mixin contrast-inverse($name, $from, $alpha: 1) {
    @supports     (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{slg.sign(calc(0.6 - l))} * 0.8 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
    @supports not (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{flg.sign(calc(0.6 - l))} * 0.8 * 0.5 + 0.5) calc(c * 0.4) h / #{$alpha})"); }
}

//
@mixin ux-highlight-color {
    @include contrast-inverse("--theme-highlight-color", "var(--theme-surface-color, transparent)", 1);
}

//
@mixin ux-bg-dep {
    @include contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");
    & { --theme-glyph-color: var(--contrast-glyph-color); }
}

//
@mixin ux-solid {
    & { --theme-solid-color     : #{cu.theme-mod-up(cl.$baseColor, 96%)}; }
    & { --accent-surface-color  : #{cl.$baseColor}; };
    & { --theme-surface-color   : oklch(from color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), var(--theme-solid-color)) l c h / var(--theme-surface-alpha)); }
    & { --adaptive-surface-color: oklch(from color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), var(--theme-solid-color)) l c h / var(--theme-surface-alpha)); }

    //
    @include contrast-inverse("--accent-glyph-color", cl.$baseColor);
    @include ux-bg-dep;
}

//
@mixin ux-inverse {
    & { --theme-solid-color     : #{cu.theme-mod-down(cl.$baseColor, 80%)}; }
    & { --accent-surface-color  : #{cl.$baseColor}; };
    & { --theme-surface-color   : oklch(from color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), var(--theme-solid-color)) l c h / var(--theme-surface-alpha)); }
    & { --adaptive-surface-color: oklch(from color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), var(--theme-solid-color)) l c h / var(--theme-surface-alpha)); }

    //
    @include contrast-inverse("--accent-glyph-color", cl.$baseColor);
    @include ux-bg-dep;
}

//
@mixin ux-accent-inverse {
    & { --theme-solid-color     : #{cu.theme-mod-up(cl.$baseColor, 96%)}; }
    & { --accent-surface-color  : #{cl.$baseColor}; };
    & { --adaptive-surface-color: var(--accent-surface-color); }

    //
    @include contrast-inverse("--theme-surface-color", "var(--adaptive-surface-color)", "var(--theme-surface-alpha)");
    @include ux-bg-dep;
}

//
@mixin ux-dynamic {
    & { --theme-surface-color: oklch(from var(--theme-dynamic-color, transparent) l c h / var(--theme-surface-alpha)); }
    @include ux-bg-dep;
}

//
@mixin ux-transparent-mode {
    @include ux-highlight-color;
    $color: "oklch(from var(--theme-surface-color) l c h / var(--theme-surface-alpha))";
    & { --theme-surface-alpha  : 0; }
    & { --current-surface-color: color-mix(in oklch, var(--theme-highlight-color) calc(var(--highlight-coefficient) * 1%), #{$color}); }
    @include ux-bg-dep;
}

//
@layer ux-colors {

    //
    :root {
        --range-slider:          #{cu.theme-mod-up(cl.$baseColor, 90%)};; /* slider main background color */
        --range-handle-inactive: #{cu.theme-mod-up(cl.$baseColor, 80%)};; /* inactive handle color */
        --range-handle:          #{cu.theme-mod-up(cl.$baseColor, 20%)};; /* non-focussed handle color */
        --range-handle-focus:    #{cu.theme-mod-up(cl.$baseColor, 10%)}; /* focussed handle color */
        --range-handle-border:   var(--range-handle); /* handle border color */
        --range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */
        --range-range:           var(--range-handle-focus); /* active range background color */
        --range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */
        --range-float:           var(--range-handle-focus); /* floating label background color */
        --range-float-text:      #{cu.theme-mod-up(cl.$baseColor, 100%)};; /* text color on floating label */
    }

    //
    :root, :where(html) {
        --theme-surface-alpha: 0;
        --theme-accent-chroma: 0;
        --theme-dynamic-color: var(--theme-base-color, transparent);
        --theme-is-dark: 0; color-scheme: light;

        & { --accent-surface-color: #{cl.$baseColor}; };
        @include contrast-inverse("--accent-glyph-color", cl.$baseColor);
        @include contrast-inverse("--contrast-surface-color", "var(--theme-glyph-color, transparent)");
        @include contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");

        @media (prefers-color-scheme: light) { --theme-is-dark: 0; color-scheme: light; }
        @media (prefers-color-scheme: dark)  { --theme-is-dark: 1; color-scheme: dark; }
    }

    //
    :root, :host, :scope, :where(html, body) {
        @include ux-solid;
        @include ux-highlight-color;

        //
        & {
            --theme-surface-alpha: 0;
            --theme-accent-chroma: 0;
            --theme-accent-color: var(--theme-glyph-color);
            --theme-chroma-color: var(--theme-base-color);
            --highlight-coefficient: 0.0;
        }

        //
        & { --accent-surface-color: #{cl.$baseColor}; };
        @include contrast-inverse("--accent-glyph-color", cl.$baseColor);
        @include contrast-inverse("--contrast-surface-color", "var(--theme-glyph-color, transparent)");
        @include contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");
    }

    //
    :root, :host, :scope, :where(*) {
        &, &::before, &::after, &::selection {
            --theme-chroma-mod: oklch(from #{cl.$baseColor} l 0.99 h);
            --theme-black-mod: oklch(from #{cl.$baseColor} 0.01 0.01 h);
            --theme-white-mod: oklch(from #{cl.$baseColor} 0.99 0.01 h);

            //
            --theme-dark-down-mod: color-mix(in oklch, var(--theme-black-mod) 98%, #{cl.$baseColor});
            --theme-dark-up-mod: color-mix(in oklch, var(--theme-white-mod) 90%, #{cl.$baseColor});

            //
            --theme-light-down-mod: color-mix(in oklch, var(--theme-white-mod) 98%, #{cl.$baseColor});
            --theme-light-up-mod: color-mix(in oklch, var(--theme-black-mod) 90%, #{cl.$baseColor});
        }
    }

    //
    :where([data-highlight-hover], [data-highlight]) *:not([data-highlight], [data-highlight-hover]) {
        --highlight-coefficient: 0;
    }

    //
    *[data-transparent]:not([data-transparent="false"]) {
        @include ux-transparent-mode;
    }

    //
    :where([data-scheme]) *:not([data-scheme]) {
        @include ux-transparent-mode;
    }

    //
    :root, :host, :scope, :where(html, body, *) {
        &, &::before, &::after, &::selection {
            --current-glyph-color: var(--theme-glyph-color);
            --current-surface-color: color-mix(in oklch, var(--theme-highlight-color) calc(var(--highlight-coefficient) * 1%), var(--theme-surface-color));
            --current-accent-color: var(--theme-accent-color);
            --current-chroma-color: var(--theme-chroma-color);
            --highlight-coefficient: 0.0;

            //
            @include cu.var-dependent();

            //
            //:where(*) {
                --highlight-transition-duration: 0.2s;
                --highlight-transition-mode: linear;
                --highlight-transition-property: --highlight-coefficient;
                transition: var(--highlight-transition-property) var(--highlight-transition-duration) var(--highlight-transition-mode);
            //}

            //
            @supports(color: light-dark(white, black)) {
                @include cu.scheme-dependent;
            }

            //
            @include ux-highlight-color;
        }
    }

    //
    :root, :host, :scope, :where(body), :where(.ux-default-theme), :where(*) {
        //
        &::selection, ::selection {
            //@include ux-inverse;

            color: var(--current-surface-color);
            background-color: var(--current-glyph-color);
        }

        //
        &, &::before, &::after, &::selection {
            accent-color: var(--current-glyph-color);
            color: var(--current-glyph-color);
            background-color: var(--current-surface-color);
            stroke: var(--current-glyph-color);

            //
            & :where(svg), &:where(svg) {
                background-color: transparent;
                stroke: var(--current-glyph-color);
            }
        }

        //
        &:where(a, span), :where(a, span) {
            background-color: transparent;
        }
    }

    //
    @media screen and ((hover: hover) or (pointer: fine)) {
        // no-js version
        /**[data-highlight-hover="1"]:hover { --highlight-coefficient: 3; }
        *[data-highlight-hover="2"]:hover { --highlight-coefficient: 6; }
        *[data-highlight-hover="3"]:hover { --highlight-coefficient: 9; }
        *[data-highlight-hover="4"]:hover { --highlight-coefficient: 12; }*/

        //
        @supports (opacity: attr(data-highlight-hover number, 1)) {
            *[data-highlight-hover]:hover { --highlight-coefficient: calc(attr(data-highlight-hover number, 1) * 3); }
        }

        // fallback support
        @supports not (opacity: attr(data-highlight-hover number, 1)) {
            @property --data-highlight-hover-attr { initial-value: 1; inherits: true; syntax: "<number>"; };
            *[data-highlight-hover]:hover { --highlight-coefficient: calc(var(--data-highlight-hover-attr, 1) * 3); }
        }
    }

    //
    @media screen and (hover: none) and (pointer: coarse) {
        // no-js version
        /**[data-highlight-hover="1"]:active { --highlight-coefficient: 3; }
        *[data-highlight-hover="2"]:active { --highlight-coefficient: 6; }
        *[data-highlight-hover="3"]:active { --highlight-coefficient: 9; }
        *[data-highlight-hover="4"]:active { --highlight-coefficient: 12; }*/

        //
        @supports (opacity: attr(data-highlight-hover number, 1)) {
            *[data-highlight-hover]:active { --highlight-coefficient: calc(attr(data-highlight-hover number, 1) * 3); }
        }

        // fallback support
        @supports not (opacity: attr(data-highlight-hover number, 1)) {
            @property --data-highlight-hover-attr { initial-value: 1; inherits: true; syntax: "<number>"; };
            *[data-highlight-hover]:hover { --highlight-coefficient: calc(var(--data-highlight-hover-attr, 1) * 3); }
        }
    }

    //
    *[data-theme="dark"] { --theme-is-dark: 1; color-scheme: dark; }
    *[data-theme="light"] { --theme-is-dark: 0; color-scheme: light; }

    //
    *[data-scheme="dynamic"]             { @include ux-dynamic;        & { --theme-accent-chroma: 1; --theme-surface-alpha: 1; }; }
    *[data-scheme="accent"]              { @include ux-solid;          & { --theme-accent-chroma: 1; --theme-surface-alpha: 1; }; } // deprecated...
    *[data-scheme="solid"]               { @include ux-solid;          & { --theme-accent-chroma: 0; --theme-surface-alpha: 1; }; }
    *[data-scheme="inverse"]             { @include ux-inverse;        & { --theme-accent-chroma: 0; --theme-surface-alpha: 1; }; }
    *[data-scheme="accent-inverse"]      { @include ux-accent-inverse; & { --theme-accent-chroma: 1; --theme-surface-alpha: 1; }; }
    *[data-scheme="transparent"]         { @include ux-solid;          & { --theme-accent-chroma: 1; --theme-surface-alpha: 0; }; }
    *[data-scheme="solid-transparent"]   { @include ux-solid;          & { --theme-accent-chroma: 0; --theme-surface-alpha: 0; }; }
    *[data-scheme="dynamic-transparent"] { @include ux-dynamic;        & { --theme-accent-chroma: 1; --theme-surface-alpha: 0; }; }


    //
    @supports (opacity: attr(data-highlight number, 1)) {
        *[data-highlight] { --highlight-coefficient: calc(attr(data-highlight number, 1) * 3); }
    }

    // fallback support
    @supports not (opacity: attr(data-highlight number, 1)) {
        @property --data-highlight-attr { initial-value: 1; inherits: true; syntax: "<number>"; };
        *[data-highlight] { --highlight-coefficient: calc(var(--data-highlight-attr, 1) * 3); }
    }


    //
    @supports (opacity: attr(data-chroma number, 0)) {
        *[data-chroma] { --theme-accent-chroma: attr(data-chroma number, 0); }
    }

    // fallback support
    @supports not (opacity: attr(data-chroma number, 0)) {
        @property --data-chroma-attr { initial-value: 0; inherits: true; syntax: "<number>"; };
        *[data-chroma] { --theme-accent-chroma: calc(var(--data-chroma-attr, 0) * 3); }
    }


    //
    @supports (opacity: attr(data-alpha number, 1)) {
        *[data-chroma] { --theme-surface-alpha: attr(data-alpha number, 1); }
    }

    // fallback support
    @supports not (opacity: attr(data-alpha number, 1)) {
        @property --data-alpha-attr { initial-value: 1; inherits: true; syntax: "<number>"; };
        *[data-chroma] { --theme-surface-alpha: var(--data-alpha-attr, 1); }
    }



    //
    :where(span, svg) {
        background-color: transparent;
    }

    //
    :where(x-scrollbox) {
        --sb-color: #{cu.theme-mod-down(cu.theme-mod-up(cl.$baseColor, 80%), 20%)};
    }
}
