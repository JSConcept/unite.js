/*
 * There is color constants (of dynamic colors)
 */

@use "./ColorUtils" as cu;
@use "./ColorVars" as cl;

//
@use "../core/LogicFb" as flg;
@use "../core/LogicSign" as slg;

//
@mixin contrast($name, $from, $alpha: 1) {
    @supports     (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{slg.sign(calc(l - 0.6))} * 0.8 * 0.5 + 0.5) calc(c * 0.2) h / #{$alpha})"); }
    @supports not (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{flg.sign(calc(l - 0.6))} * 0.8 * 0.5 + 0.5) calc(c * 0.2) h / #{$alpha})"); }
}

//
@mixin contrast-inverse($name, $from, $alpha: 1) {
    @supports     (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{slg.sign(calc(0.6 - l))} * 0.8 * 0.5 + 0.5) calc(c * 0.2) h / #{$alpha})"); }
    @supports not (opacity: sign(0.5)) { #{$name}: unquote("oklch(from #{$from} calc(#{flg.sign(calc(0.6 - l))} * 0.8 * 0.5 + 0.5) calc(c * 0.2) h / #{$alpha})"); }
}

//
@mixin ux-highlight-color {
    @include contrast-inverse("--theme-highlight-color", "var(--theme-surface-color, transparent)", 1);
}

//
@mixin ux-accent {
    & { --accent-surface-color: #{cl.$baseColor}; };
    @include contrast-inverse("--accent-glyph-color", cl.$baseColor);

    //
    & {
        --theme-accent-chroma: 1.0;
        --theme-glyph-color: color-mix(in oklch, var(--accent-glyph-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-down(cl.$baseColor, 90%)});
        --theme-surface-color: color-mix(in oklch,var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-up(cl.$baseColor, 96%)});
    }
}

//
@mixin ux-solid {
    & { --accent-surface-color: #{cl.$baseColor}; };
    @include contrast-inverse("--accent-glyph-color", cl.$baseColor);

    //
    --theme-accent-chroma: 0.0;
    --theme-glyph-color: color-mix(in oklch, var(--accent-glyph-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-down(cl.$baseColor, 90%)});
    --theme-surface-color: color-mix(in oklch,var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-up(cl.$baseColor, 96%)});
}

//
@mixin ux-inverse {
    & { --accent-surface-color: #{cl.$baseColor}; };
    @include contrast-inverse("--accent-glyph-color", cl.$baseColor);

    //
    --theme-accent-chroma: 0.0;
    --theme-glyph-color: color-mix(in oklch, var(--accent-glyph-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-up(cl.$baseColor, 96%)});
    --theme-surface-color: color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-down(cl.$baseColor, 90%)});
}

//--theme-accent-chroma
@mixin ux-accent-inverse {
    @include contrast-inverse("--accent-surface-color", cl.$baseColor);
    @include contrast("--accent-glyph-color", cl.$baseColor);

    //
    & {
        --theme-glyph-color: color-mix(in oklch, var(--accent-glyph-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-up(cl.$baseColor, 96%)});
        --theme-surface-color: color-mix(in oklch, var(--accent-surface-color) calc(100% * var(--theme-accent-chroma)), #{cu.theme-mod-down(cl.$baseColor, 90%)});
    }
}

@mixin ux-transparent {
    & { --theme-surface-color: oklch(from #{cl.$baseColor} l c h / 0.0); }
    @include contrast-inverse("--theme-glyph-color", cl.$baseColor);
}

@mixin ux-solid-transparent {
    --theme-surface-color: oklch(from #{cu.theme-mod-up(cl.$baseColor, 90%)} l c h / 0.0);
    --theme-glyph-color: #{cu.theme-mod-down(cl.$baseColor, 90%)};
}

//
@mixin ux-dynamic {
    & { --theme-surface-color: var(--theme-dynamic-color, transparent); }
    @include contrast-inverse("--theme-glyph-color", "var(--theme-dynamic-color, transparent)");
}

//
@mixin ux-dynamic-transparent {
    & { --theme-surface-color: oklch(from var(--theme-dynamic-color, transparent) l c h / 0.0); };
    @include contrast-inverse("--theme-glyph-color", "var(--theme-dynamic-color, transparent)");
}

//
@mixin ux-transparent-mode {
    @include ux-highlight-color;
    $color: "oklch(from var(--theme-surface-color) l c h / 0.0)";
    & { --current-surface-color: color-mix(in oklch, var(--theme-highlight-color) calc(var(--highlight-coefficient) * 1%), #{$color}); }
}

//
@mixin ux-bg-dep {
    @include contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");
    --theme-glyph-color: color-mix(in oklch, var(--accent-glyph-color) calc(100% * var(--theme-accent-chroma)), var(--contrast-glyph-color));
}

//
@layer ux-colors {

    :root {
        --range-slider:          #{cu.theme-mod-up(cl.$baseColor, 90%)};; /* slider main background color */
        --range-handle-inactive: #{cu.theme-mod-up(cl.$baseColor, 80%)};; /* inactive handle color */
        --range-handle:          #{cu.theme-mod-up(cl.$baseColor, 20%)};; /* non-focussed handle color */
        --range-handle-focus:    #{cu.theme-mod-up(cl.$baseColor, 10%)}; /* focussed handle color */
        --range-handle-border:   var(--range-handle); /* handle border color */
        --range-range-inactive:  var(--range-handle-inactive); /* inactive range bar background color */
        --range-range:           var(--range-handle-focus); /* active range background color */
        --range-float-inactive:  var(--range-handle-inactive); /* inactive floating label background color */
        --range-float:           var(--range-handle-focus); /* floating label background color */
        --range-float-text:      #{cu.theme-mod-up(cl.$baseColor, 100%)};; /* text color on floating label */
    }

    //
    :root, :where(html) {
        --theme-dynamic-color: var(--theme-base-color, transparent);
        --theme-is-dark: 0; color-scheme: light;

        & { --accent-surface-color: #{cl.$baseColor}; };
        @include contrast-inverse("--accent-glyph-color", cl.$baseColor);
        @include contrast-inverse("--contrast-surface-color", "var(--theme-glyph-color, transparent)");
        @include contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");

        @media (prefers-color-scheme: light) { --theme-is-dark: 0; color-scheme: light; }
        @media (prefers-color-scheme: dark)  { --theme-is-dark: 1; color-scheme: dark; }
    }

    //
    :root, :host, :scope, :where(html, body) {
        --theme-glyph-color: #{cl.$glyphColor};
        --theme-surface-color: #{cl.$surfaceColor};
        --theme-accent-color: #{cl.$accentColor};
        --theme-chroma-color: #{cl.$chromaColor};
        --highlight-coefficient: 0.0;
        @include ux-highlight-color;

        //
        & { --accent-surface-color: #{cl.$baseColor}; };
        @include contrast-inverse("--accent-glyph-color", cl.$baseColor);
        @include contrast-inverse("--contrast-surface-color", "var(--theme-glyph-color, transparent)");
        @include contrast-inverse("--contrast-glyph-color", "var(--theme-surface-color, transparent)");
    }

    //
    :root, :host, :scope, :where(*) {
        &, &::before, &::after, &::selection {
            --theme-chroma-mod: oklch(from #{cl.$baseColor} l 0.99 h);
            --theme-black-mod: oklch(from #{cl.$baseColor} 0.01 0.01 h);
            --theme-white-mod: oklch(from #{cl.$baseColor} 0.99 0.01 h);

            //
            --theme-dark-down-mod: color-mix(in oklch, var(--theme-black-mod) 98%, #{cl.$baseColor});
            --theme-dark-up-mod: color-mix(in oklch, var(--theme-white-mod) 90%, #{cl.$baseColor});

            //
            --theme-light-down-mod: color-mix(in oklch, var(--theme-white-mod) 98%, #{cl.$baseColor});
            --theme-light-up-mod: color-mix(in oklch, var(--theme-black-mod) 90%, #{cl.$baseColor});
        }
    }

    //
    *[data-transparent]:not([data-transparent="false"]) {
        @include ux-transparent-mode;
    }

    //
    *[data-bg-dep]:not([data-bg-dep="false"]) {
        @include ux-bg-dep;
    }

    //
    :where([data-scheme]) *:not([data-scheme]) {
        @include ux-transparent-mode;
    }

    //
    :where([data-highlight-hover], [data-highlight]) *:not([data-highlight], [data-highlight-hover]) {
        --highlight-coefficient: 0;
    }

    //
    @media screen and ((hover: hover) or (pointer: fine)) {
        *[data-highlight-hover="1"]:hover { --highlight-coefficient: 3; }
        *[data-highlight-hover="2"]:hover { --highlight-coefficient: 6; }
        *[data-highlight-hover="3"]:hover { --highlight-coefficient: 12; }
        *[data-highlight-hover="4"]:hover { --highlight-coefficient: 16; }
    }

    //
    @media screen and (hover: none) and (pointer: coarse) {
        *[data-highlight-hover="1"]:active { --highlight-coefficient: 3; }
        *[data-highlight-hover="2"]:active { --highlight-coefficient: 6; }
        *[data-highlight-hover="3"]:active { --highlight-coefficient: 12; }
        *[data-highlight-hover="4"]:active { --highlight-coefficient: 16; }
    }

    //
    *[data-highlight="0.5"] { --highlight-coefficient: 1.5; }
    *[data-highlight="1"] { --highlight-coefficient: 3; }
    *[data-highlight="2"] { --highlight-coefficient: 6; }
    *[data-highlight="2.5"] { --highlight-coefficient: 9; }
    *[data-highlight="3"] { --highlight-coefficient: 12; }

    //
    *[data-theme="dark"] { --theme-is-dark: 1; color-scheme: dark; }
    *[data-theme="light"] { --theme-is-dark: 0; color-scheme: light; }

    //
    *[data-scheme="dynamic"] { @include ux-dynamic; }
    *[data-scheme="accent"] { @include ux-accent; }
    *[data-scheme="solid"] { @include ux-solid; }
    *[data-scheme="inverse"] { @include ux-inverse; }
    *[data-scheme="accent-inverse"] { @include ux-accent-inverse; }
    *[data-scheme="transparent"] { @include ux-transparent; }
    *[data-scheme="solid-transparent"] { @include ux-solid-transparent(); }
    *[data-scheme="dynamic-transparent"] { @include ux-dynamic-transparent; }

    //
    :root, :host, :scope, :where(html, body, *) {
        &, &::before, &::after, &::selection {
            --current-glyph-color: var(--theme-glyph-color);
            --current-surface-color: color-mix(in oklch, var(--theme-highlight-color) calc(var(--highlight-coefficient) * 1%), var(--theme-surface-color));
            --current-accent-color: var(--theme-accent-color);
            --current-chroma-color: var(--theme-chroma-color);
            --highlight-coefficient: 0.0;

            //
            @include cu.var-dependent();

            //
            //:where(*) {
                --highlight-transition-duration: 0.2s;
                --highlight-transition-mode: linear;
                --highlight-transition-property: --highlight-coefficient;
                transition: var(--highlight-transition-property) var(--highlight-transition-duration) var(--highlight-transition-mode);
            //}

            //
            @supports(color: light-dark(white, black)) {
                @include cu.scheme-dependent;
            }

            //
            @include ux-highlight-color;
        }
    }

    //
    :root, :host, :scope, :where(body), :where(.ux-default-theme), :where(*) {
        //
        &::selection, ::selection {
            //@include ux-inverse;

            color: var(--current-surface-color);
            background-color: var(--current-glyph-color);
        }

        //
        &, &::before, &::after, &::selection {
            accent-color: var(--current-glyph-color);
            color: var(--current-glyph-color);
            background-color: var(--current-surface-color);
            stroke: var(--current-glyph-color);

            //
            & :where(svg), &:where(svg) {
                background-color: transparent;
                stroke: var(--current-glyph-color);
            }
        }

        //
        &:where(a, span), :where(a, span) {
            background-color: transparent;
        }
    }

    //
    :where(span, svg) {
        background-color: transparent;
    }

    //
    :where(x-scrollbox) {
        --sb-color: #{cu.theme-mod-down(cu.theme-mod-up(cl.$baseColor, 80%), 20%)};
    }
}
