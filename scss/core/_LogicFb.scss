$cps: 0.00001;


@function abs($a) {
    @return unquote("max(#{$a}, calc(-1 * #{$a}))");
}

@function sign($a) {
    // KGB value (old, has fractional value issue)
    //@return unquote("clamp(-1, calc(#{$a} / max(#{abs($a)}, 0.0001)), 1)");

    // FSB value (newer, has 0 value issue when less than 0.00001)
    @return unquote("round(to-zero, clamp(-1, calc(#{$a} / max(#{abs($a)}, #{$cps})), 1), 1)");
}

@function gt($a, $b) {
    $diff: "calc(#{$b} - #{$cps} - #{$a})";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function lt($a, $b) {
    $diff: "calc(#{$a} - #{$cps} - #{$b})";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function ge($a, $b) {
    $diff: "calc(#{$b} + #{$cps} - #{$a})";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function le($a, $b) {
    $diff: "calc(#{$a} + #{$cps} - #{$b})";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function ne($a, $b) {
    $comp: "calc(#{$a} - #{$b})";
    $diff: "max(#{abs($comp)} - #{$cps}, 0)";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function eq($a, $b) {
    $diff: "calc(1 - #{ne($a, $b)})";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function mix($a, $b, $i) {
    @return unquote("calc(#{$a} * #{$i} + #{$b} * calc(1 - #{$i}))");
}

@function land($a, $b) {
    $diff: "calc(#{$a} * #{$b})";
    @return unquote("max(#{sign($diff)}, 0)");
}

@function lor($a, $b) {
    $diff: "max(#{$a}, #{$b})";
    @return unquote("max(#{sign($diff)}, 0)");
}

// currently un-used...
@function lenToNum($l, $d: 1px) {
    @return "tan(atan2(#{$l}, #{$d}))";
}
